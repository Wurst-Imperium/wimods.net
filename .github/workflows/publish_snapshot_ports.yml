name: Publish Snapshot Mod Ports

on:
  workflow_dispatch:
    inputs:
      mc_version:
        description: "Target Minecraft version (leave blank to auto detect)"
        required: false
      branch:
        description: "Branch for the current snapshot cycle (leave blank to auto detect)"
        required: false
      include_wurst:
        description: "Include Wurst Client"
        type: boolean
        required: false
        default: true
      include_wi_zoom:
        description: "Include WI Zoom"
        type: boolean
        required: false
        default: true
      include_mo_glass:
        description: "Include Mo Glass"
        type: boolean
        required: false
        default: true
      announce:
        description: "Announce the snapshot port(s) on WurstForum"
        type: boolean
        required: false
        default: true
      announce_only:
        description: "Only announce, don't publish"
        type: boolean
        required: false
        default: false


jobs:

  prepare:
    runs-on: ubuntu-latest
    outputs:
      mc_version: ${{ steps.get_mc_version.outputs.mc_version }}
      branch: ${{ steps.get_branch.outputs.branch }}
      matrix: ${{ steps.set_matrix.outputs.matrix }}
    steps:
    - name: Get Minecraft version
      id: get_mc_version
      run: |
        MC_VERSION="${{ inputs.mc_version }}"
        if [ -z "$MC_VERSION" ]; then
          RESPONSE=$(curl -s https://launchermeta.mojang.com/mc/game/version_manifest.json)
          MC_VERSION=$(echo "$RESPONSE" | jq -r '.latest.snapshot')
          if [ -z "$MC_VERSION" ]; then
            echo "No latest Minecraft snapshot found"
            echo "Response: $RESPONSE"
            exit 1
          fi
        fi
        echo "mc_version=$MC_VERSION" >> $GITHUB_OUTPUT
        echo "Minecraft version: \`$MC_VERSION\`" >> $GITHUB_STEP_SUMMARY
    - name: Get branch for current snapshot cycle
      id: get_branch
      run: |
        BRANCH="${{ inputs.branch }}"
        if [ -z "$BRANCH" ]; then
          RESPONSE=$(curl -s https://raw.githubusercontent.com/Wurst-Imperium/wimods.net/refs/heads/master/data/current_snapshot_cycle.json)
          BRANCH=$(echo "$RESPONSE" | jq -r '.target_release')
        fi
        echo "branch=$BRANCH" >> $GITHUB_OUTPUT
        echo "Branch: \`$BRANCH\`" >> $GITHUB_STEP_SUMMARY
    - id: set_matrix
      run: |
        mods=()
        if [[ "${{ inputs.announce_only }}" == "false" ]]; then
          if [[ "${{ inputs.include_wi_zoom }}" == "true" ]]; then
            mods+=('{"name": "WI Zoom", "repo": "WI-Zoom"}')
          fi
          if [[ "${{ inputs.include_mo_glass }}" == "true" ]]; then
            mods+=('{"name": "Mo Glass", "repo": "Mo-Glass"}')
          fi
        fi
        echo "matrix={\"mod\":[$(IFS=,; echo "${mods[*]}")]}" >> "$GITHUB_OUTPUT"

  wurst:
    name: Wurst Client
    needs: prepare
    runs-on: ubuntu-latest
    if: ${{ inputs.include_wurst && !inputs.announce_only }}
    steps:
    - name: Build Wurst publish inputs
      id: wurst_inputs
      run: |
        JSON_STRING=$(cat << EOF
        {
          "close_milestone": "false",
          "upload_backups": "true",
          "publish_github": "true",
          "update_website": "true"
        }
        EOF
        )
        # Convert to single line and escape quotes
        echo "json=${JSON_STRING//$'\n'/}" >> "$GITHUB_OUTPUT"
    - name: Trigger publish workflow
      id: wurst_dispatch
      uses: codex-/return-dispatch@v2
      with:
        token: ${{ secrets.SNAPSHOT_MODS_ACTIONS_TOKEN }}
        owner: Wurst-Imperium
        repo: Wurst7
        ref: ${{ needs.prepare.outputs.branch }}
        workflow: publish.yml
        workflow_inputs: ${{ steps.wurst_inputs.outputs.json }}
    - name: Wait for publish workflow to finish (run ${{ steps.wurst_dispatch.outputs.run_id }})
      uses: codex-/await-remote-run@v1
      with:
        token: ${{ secrets.SNAPSHOT_MODS_ACTIONS_TOKEN }}
        owner: Wurst-Imperium
        repo: Wurst7
        run_id: ${{ steps.wurst_dispatch.outputs.run_id }}
        run_timeout_seconds: 600  # 10 minutes

  wi_mods:
    name: ${{ matrix.mod.name }}
    needs: prepare
    runs-on: ubuntu-latest
    if: ${{ needs.prepare.outputs.matrix != '{"mod":[]}' }}
    strategy:
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
      max-parallel: 1
    steps:
    - name: Build ${{ matrix.mod.name }} publish inputs
      id: mod_inputs
      run: |
        JSON_STRING=$(cat << EOF
        {
          "close_milestone": "false",
          "upload_backups": "true",
          "publish_github": "true",
          "publish_curseforge": "true",
          "publish_modrinth": "true",
          "update_website": "true"
        }
        EOF
        )
        # Convert to single line and escape quotes
        echo "json=${JSON_STRING//$'\n'/}" >> "$GITHUB_OUTPUT"
    - name: Trigger publish workflow
      id: mod_dispatch
      uses: codex-/return-dispatch@v2
      with:
        token: ${{ secrets.SNAPSHOT_MODS_ACTIONS_TOKEN }}
        owner: Wurst-Imperium
        repo: ${{ matrix.mod.repo }}
        ref: ${{ needs.prepare.outputs.branch }}
        workflow: publish.yml
        workflow_inputs: ${{ steps.mod_inputs.outputs.json }}
    - name: Wait for publish workflow to finish (run ${{ steps.mod_dispatch.outputs.run_id }})
      uses: codex-/await-remote-run@v1
      with:
        token: ${{ secrets.SNAPSHOT_MODS_ACTIONS_TOKEN }}
        owner: Wurst-Imperium
        repo: ${{ matrix.mod.repo }}
        run_id: ${{ steps.mod_dispatch.outputs.run_id }}
        run_timeout_seconds: 600  # 10 minutes

  announce:
    runs-on: ubuntu-latest
    needs: [wurst, wi_mods, prepare]
    if: ${{ !failure() && !cancelled() && inputs.announce && needs.prepare.result == 'success' }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: "pip"
        cache-dependency-path: scripts/requirements.txt
    - name: Install dependencies
      run: pip install -r scripts/requirements.txt
    - name: Run announce_snapshot_ports.py
      env:
        WURSTFORUM_TOKEN: ${{ secrets.WF_BOT_TOKEN }}
      run: |
        python scripts/announce_snapshot_ports.py \
          ${{ needs.prepare.outputs.mc_version }} \
          ${{ needs.prepare.outputs.branch }} \
          ${{ inputs.include_wurst && 'wurst7' || '' }} \
          ${{ inputs.include_wi_zoom && 'wi-zoom' || '' }} \
          ${{ inputs.include_mo_glass && 'mo-glass' || '' }}
